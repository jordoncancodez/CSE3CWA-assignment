import React from "react";

"use client";

import { useEffect, useMemo, useState } from "react";

type Tab = { id: string; title: string; content: string };

const MAX_TABS = 15;
const STORAGE_KEY = "tabsBuilder.v1";

function uid() { return Math.random().toString(36).slice(2, 9); }

export default function TabsBuilder() {
  const [tabs, setTabs] = useState<Tab[]>([{ id: uid(), title: "Tab 1", content: "Hello world" }]);
  const [active, setActive] = useState(0);
  const [generated, setGenerated] = useState("");

  // Load/Save to localStorage (operations rubric)
  useEffect(() => {
    const raw = localStorage.getItem(STORAGE_KEY);
    if (raw) {
      try {
        const parsed = JSON.parse(raw) as Tab[];
        if (parsed.length) setTabs(parsed.slice(0, MAX_TABS));
      } catch {}
    }
  }, []);
  useEffect(() => { localStorage.setItem(STORAGE_KEY, JSON.stringify(tabs)); }, [tabs]);

  function addTab() {
    if (tabs.length >= MAX_TABS) return;
    setTabs([...tabs, { id: uid(), title: `Tab ${tabs.length + 1}`, content: "" }]);
    setActive(tabs.length);
  }
  function removeTab(idx: number) {
    const next = tabs.slice();
    next.splice(idx, 1);
    setTabs(next.length ? next : [{ id: uid(), title: "Tab 1", content: "" }]);
    setActive(Math.max(0, idx - 1));
  }

  function genHTML(): string {
    // Build HTML + JS with INLINE styles only (no classes)
    const esc = (s: string) =>
      s.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;");

    const tabsButtons = tabs.map((t, i) =>
      `<button role="tab" id="tab-${i}"
        aria-controls="panel-${i}"
        aria-selected="${i === 0 ? "true" : "false"}"
        tabindex="${i === 0 ? "0" : "-1"}"
        onclick="selectTab(${i})"
        style="appearance:none;border:none;background:${i===0?"#ececec":"transparent"};padding:8px 12px;margin-right:6px;border-radius:8px;cursor:pointer;font:inherit;"
      >${esc(t.title)}</button>`).join("");

    const panels = tabs.map((t, i) =>
      `<div id="panel-${i}" role="tabpanel" aria-labelledby="tab-${i}"
        style="display:${i===0?"block":"none"};padding:12px;border:1px solid rgba(0,0,0,.15);border-radius:12px;margin-top:12px;"
      >${t.content}</div>`).join("");

    // Entire document chunk the user will paste into Moodle/HTML file:
    return `<!-- Generated by LTU HTML Generator -->
<div style="font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color-scheme: light dark;">
  <div role="tablist" aria-label="Tabs" style="margin-bottom:6px;">
    ${tabsButtons}
  </div>
  ${panels}
</div>
<script>
(function(){
  function setSel(i){
    const tabs=[...document.querySelectorAll('[role="tab"]')];
    const panels=[...document.querySelectorAll('[role="tabpanel"]')];
    tabs.forEach((b,idx)=>{
      const sel = idx===i;
      b.setAttribute('aria-selected', sel ? 'true' : 'false');
      b.setAttribute('tabindex', sel ? '0' : '-1');
      b.style.background = sel ? '#ececec' : 'transparent';
    });
    panels.forEach((p,idx)=>{ p.style.display = idx===i ? 'block' : 'none'; });
    tabs[i]?.focus();
  }
  window.selectTab = setSel;

  // Keyboard support (Left/Right/Home/End) for accessibility
  document.addEventListener('keydown', function(e){
    const keys = ['ArrowLeft','ArrowRight','Home','End'];
    if(!keys.includes(e.key)) return;
    const tabs=[...document.querySelectorAll('[role="tab"]')];
    const current = tabs.findIndex(b=>b.getAttribute('aria-selected')==='true');
    let next = current;
    if(e.key==='ArrowRight') next = (current+1)%tabs.length;
    if(e.key==='ArrowLeft') next = (current-1+tabs.length)%tabs.length;
    if(e.key==='Home') next = 0;
    if(e.key==='End') next = tabs.length-1;
    setSel(next);
    e.preventDefault();
  });
})();
</script>`;
  }

  function handleGenerate() {
    const html = genHTML();
    setGenerated(html);
    navigator.clipboard?.writeText(html).catch(()=>{});
  }

  function download() {
    const blob = new Blob([generated], { type: "text/html" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = "weekAssign.html";
    a.click();
    URL.revokeObjectURL(a.href);
  }

  // Quick demo presets for your video: 1, 3, and 5 tabs
  function fillPreset(n: number) {
    const arr: Tab[] = Array.from({length:n}, (_,i)=>({
      id: uid(),
      title: `Week ${i+1}`,
      content: `<h2 style="margin:0 0 8px 0;">Week ${i+1}</h2><p>Content for week ${i+1}.</p>`
    }));
    setTabs(arr);
    setActive(0);
  }

  const canAdd = tabs.length < MAX_TABS;

  return (
    <section className="card" aria-labelledby="builder-h1">
      <h1 id="builder-h1">Tabs Builder</h1>
      <p><strong>Max:</strong> {MAX_TABS} tabs. Everything auto-saves.</p>

      <div style={{display:"grid", gridTemplateColumns:"240px 1fr", gap:"1rem"}}>
        <aside>
          <button onClick={addTab} disabled={!canAdd} style={{width:"100%", padding:".6rem", borderRadius:8}}>
            + Add Tab
          </button>
          <ul aria-label="Tabs list" style={{listStyle:"none", padding:0, margin:"1rem 0"}}>
            {tabs.map((t, i)=>(
              <li key={t.id} style={{display:"flex", gap:8, alignItems:"center", marginBottom:6}}>
                <button
                  onClick={()=>setActive(i)}
                  aria-current={active===i}
                  style={{flex:1, textAlign:"left", padding:".4rem .5rem", borderRadius:8, border:"1px solid rgba(0,0,0,.2)", background: active===i?"#ececec":"transparent"}}
                >
                  {t.title || `Tab ${i+1}`}
                </button>
                <button aria-label={`Remove ${t.title || `Tab ${i+1}`}`} onClick={()=>removeTab(i)} style={{borderRadius:8, padding:".4rem .5rem"}}>â€“</button>
              </li>
            ))}
          </ul>

          <div style={{display:"grid", gap:6}}>
            <button onClick={()=>fillPreset(1)}>Preset: 1 tab</button>
            <button onClick={()=>fillPreset(3)}>Preset: 3 tabs</button>
            <button onClick={()=>fillPreset(5)}>Preset: 5 tabs</button>
          </div>
        </aside>

        <div>
          <label>
            <span className="kbd">Heading</span>
            <input
              value={tabs[active]?.title ?? ""}
              onChange={(e)=>{
                const next=[...tabs]; next[active]={...next[active], title: e.target.value}; setTabs(next);
              }}
              aria-describedby="titleHelp"
            />
          </label>
          <div id="titleHelp" style={{fontSize:12, opacity:.8, marginBottom:8}}>Tab heading (can be changed anytime).</div>

          <label>
            <span className="kbd">Content</span>
            <textarea
              value={tabs[active]?.content ?? ""}
              onChange={(e)=>{ const next=[...tabs]; next[active]={...next[active], content: e.target.value}; setTabs(next); }}
              aria-describedby="contentHelp"
            />
          </label>
          <div id="contentHelp" style={{fontSize:12, opacity:.8, margin:"8px 0 16px"}}>You can paste HTML here; it will be inserted directly into the panel.</div>

          <div style={{display:"flex", gap:8, flexWrap:"wrap"}}>
            <button onClick={handleGenerate} style={{padding:".6rem 1rem", borderRadius:8}}>Generate Output</button>
            <button onClick={download} disabled={!generated} style={{padding:".6rem 1rem", borderRadius:8}}>Download as HTML</button>
          </div>

          <h2 style={{marginTop:"1rem"}}>Output (auto-copied to clipboard)</h2>
          <textarea readOnly value={generated} placeholder="Click 'Generate Output' to see code..." />
        </div>
      </div>
    </section>
  );
}
