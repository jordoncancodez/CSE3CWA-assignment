"use client";

import { useEffect, useState } from "react";

type Tab = { id: string; title: string; content: string };

const MAX_TABS = 15;
const STORAGE_KEY = "tabsBuilder.v1";

function uid() {
  return Math.random().toString(36).slice(2, 9);
}

export default function TabsBuilder() {
  const [tabs, setTabs] = useState<Tab[]>([
    { id: uid(), title: "Tab 1", content: "Hello world" },
  ]);
  const [active, setActive] = useState<number>(0);
  const [generated, setGenerated] = useState<string>("");
  const [howToOpen, setHowToOpen] = useState(false);

  //  saved tabs
  useEffect(() => {
    const raw = localStorage.getItem(STORAGE_KEY);
    if (raw) {
      try {
        const parsed = JSON.parse(raw) as Tab[];
        if (parsed.length) {
          setTabs(parsed.slice(0, MAX_TABS));
          setActive(0);
        }
      } catch {}
    }
  }, []);

  // permannent tabs
  useEffect(() => {
    localStorage.setItem(STORAGE_KEY, JSON.stringify(tabs));
  }, [tabs]);

  const canAdd = tabs.length < MAX_TABS;

  function addTab() {
    if (!canAdd) return;
    setTabs([
      ...tabs,
      { id: uid(), title: `Tab ${tabs.length + 1}`, content: "" },
    ]);
    setActive(tabs.length);
  }

  function removeTab(idx: number) {
    const next = tabs.slice();
    next.splice(idx, 1);
    setTabs(
      next.length ? next : [{ id: uid(), title: "Tab 1", content: "" }],
    );
    setActive(Math.max(0, idx - 1));
  }

  function genHTML(): string {
    const esc = (s: string) =>
      s.replaceAll("&", "&amp;").replaceAll("<", "&lt;").replaceAll(">", "&gt;");

    const tabsButtons = tabs
      .map(
        (t, i) => `
<button role="tab" id="tab-${i}"
  aria-controls="panel-${i}"
  aria-selected="${i === 0 ? "true" : "false"}"
  tabindex="${i === 0 ? "0" : "-1"}"
  onclick="selectTab(${i})"
  style="appearance:none;border:2px solid currentColor;background:${
    i === 0 ? "#ececec" : "transparent"
  };padding:8px 12px;margin-right:6px;border-radius:6px;cursor:pointer;font:inherit;"
>${esc(t.title)}</button>`,
      )
      .join("");

    const panels = tabs
      .map(
        (t, i) => `
<div id="panel-${i}" role="tabpanel" aria-labelledby="tab-${i}"
  style="display:${i === 0 ? "block" : "none"};padding:12px;border:2px solid currentColor;border-radius:6px;margin-top:12px;"
>${t.content}</div>`,
      )
      .join("");

    return `<!-- Generated by LTU HTML Generator -->
<div style="font-family: system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif; color-scheme: light dark;">
  <div role="tablist" aria-label="Tabs" style="margin-bottom:6px;">
    ${tabsButtons}
  </div>
  ${panels}
</div>
<script>
(function(){
  function setSel(i){
    const tabs=[...document.querySelectorAll('[role="tab"]')];
    const panels=[...document.querySelectorAll('[role="tabpanel"]')];
    tabs.forEach((b,idx)=>{
      const sel = idx===i;
      b.setAttribute('aria-selected', sel ? 'true' : 'false');
      b.setAttribute('tabindex', sel ? '0' : '-1');
      b.style.background = sel ? '#ececec' : 'transparent';
    });
    panels.forEach((p,idx)=>{ p.style.display = idx===i ? 'block' : 'none'; });
    tabs[i]?.focus();
  }
  window.selectTab = setSel;

  document.addEventListener('keydown', function(e){
    const keys = ['ArrowLeft','ArrowRight','Home','End'];
    if(!keys.includes(e.key)) return;
    const tabs=[...document.querySelectorAll('[role="tab"]')];
    const current = tabs.findIndex(b=>b.getAttribute('aria-selected')==='true');
    let next = current;
    if(e.key==='ArrowRight') next = (current+1)%tabs.length;
    if(e.key==='ArrowLeft') next = (current-1+tabs.length)%tabs.length;
    if(e.key==='Home') next = 0;
    if(e.key==='End') next = tabs.length-1;
    setSel(next);
    e.preventDefault();
  });
})();
</script>`;
  }

  function handleGenerate() {
    const html = genHTML();
    setGenerated(html);
    void navigator.clipboard?.writeText(html);
  }

  function download() {
    const blob = new Blob([generated], { type: "text/html" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = "weekAssign.html";
    a.click();
    URL.revokeObjectURL(a.href);
  }

  function fillPreset(n: number) {
    const arr: Tab[] = Array.from({ length: n }, (_, i) => ({
      id: uid(),
      title: `Week ${i + 1}`,
      content: `<h2 style="margin:0 0 8px 0;">Week ${i + 1}</h2><p>Content for week ${
        i + 1
      }.</p>`,
    }));
    setTabs(arr);
    setActive(0);
  }

  return (
    <section className="card" aria-labelledby="builder-h1">
      <h1 id="builder-h1" style={{ marginTop: 0 }}>Tabs Builder</h1>

      <div className="tb-grid">
        {/*  Headers */}
        <div>
          <div style={{ display: "flex", justifyContent: "space-between", alignItems: "center", marginBottom: 6 }}>
            <strong>Tabs Headers:</strong>
            <button onClick={addTab} disabled={!canAdd} aria-label="Add tab" title="Add tab"
              style={{ border: "2px solid currentColor", borderRadius: 4, padding: "0 .4rem" }}>+</button>
          </div>

          <div className="tb-box tb-list" role="listbox" aria-label="Tabs list">
            {tabs.map((t: Tab, i: number) => (
              <div key={t.id} style={{ display: "flex", gap: 6, alignItems: "center", marginBottom: 6 }}>
                <button
                  onClick={() => setActive(i)}
                  aria-current={active === i}
                  style={{
                    border: "2px solid currentColor",
                    borderRadius: 4,
                    background: active === i ? "#ececec" : "transparent",
                    padding: ".35rem .5rem",
                  }}
                >
                  {t.title || `Tab ${i + 1}`}
                </button>
                <button
                  aria-label={`Remove ${t.title || `Tab ${i + 1}`}`}
                  onClick={() => removeTab(i)}
                  style={{
                    border: "2px solid currentColor",
                    borderRadius: 4,
                    padding: "0 .4rem",
                  }}
                >
                  –
                </button>
              </div>
            ))}
          </div>

          <div style={{ display: "grid", gap: 6, marginTop: 8 }}>
            <button onClick={() => fillPreset(1)}>Preset: 1 tab</button>
            <button onClick={() => fillPreset(3)}>Preset: 3 tabs</button>
            <button onClick={() => fillPreset(5)}>Preset: 5 tabs</button>
          </div>
        </div>

        {/* content editor */}
        <div>
          <strong>Tabs Content</strong>
          <div className="tb-box">
            <label style={{ display: "block", marginBottom: 6 }}>
              Heading
              <input
                value={tabs[active]?.title ?? ""}
                onChange={(e) => {
                  const next = [...tabs];
                  next[active] = { ...next[active], title: e.target.value };
                  setTabs(next);
                }}
              />
            </label>
            <label style={{ display: "block" }}>
              Content
              <textarea
                value={tabs[active]?.content ?? ""}
                onChange={(e) => {
                  const next = [...tabs];
                  next[active] = { ...next[active], content: e.target.value };
                  setTabs(next);
                }}
              />
            </label>
          </div>
        </div>

        {/* Output */}
        <div>
          <div style={{ display: "flex", gap: 8, alignItems: "center", marginBottom: 6 }}>
            <strong>Output</strong>
            <button onClick={handleGenerate}
              style={{ border: "2px solid currentColor", borderRadius: 4, padding: ".25rem .5rem" }}>Generate</button>
            <button onClick={download} disabled={!generated}
              style={{ border: "2px solid currentColor", borderRadius: 4, padding: ".25rem .5rem" }}>Download</button>
          </div>
          <div className="tb-box">
            <textarea readOnly value={generated} placeholder="Generated HTML will appear here..." />
          </div>
        </div>
      </div>

      <div className="tb-box" style={{ marginTop: "2rem" }}>
        <button
          onClick={() => setHowToOpen(!howToOpen)}
          style={{
            width: "100%",
            textAlign: "left",
            fontWeight: 600,
            border: "2px solid currentColor",
            borderRadius: 4,
            padding: ".5rem",
            background: howToOpen ? "#ececec" : "transparent"
          }}
        >
          {howToOpen ? "▼ How to Use" : "▶ How to Use"}
        </button>
        {howToOpen && (
          <ul style={{ marginTop: "1rem", paddingLeft: "1.2rem", lineHeight: "1.6" }}>
            <li>Click <b>+ Add Tab</b> to create new tabs.</li>
            <li>Edit tab <b>heading</b> and <b>content</b> in the middle box.</li>
            <li>Use <b>Preset</b> buttons to quickly add sample tabs.</li>
            <li>Click <b>Generate</b> to create HTML code.</li>
            <li>Copy or <b>Download</b> the generated file to use in Moodle.</li>
          </ul>
        )}
      </div>
    </section>
  );
}
